package com.leetcode.basic_theory_introduction.greedy_dp;

/**
 * Greedy Algorithm 贪婪(贪心)算法
 * 1. 一种在每一步选择中都采取在"当前状态下"最好或最优(即最有利)的选择，从而希望导致结果是最好或最优的算法
 * 2. 问题能够分解成子问题来解决，子问题的最优解(局部问题的最优解)能递推到最终问题的最优解(全局最优解)
 * 3. TODO: 它对每个子问题的解决方案都做出选择，不能回退  ==> 动态规划则会保存以前的运算结果, 有回退功能
 */
public class LearnGreedyAlgo {

    // 一旦一个问题可以通过贪心法来解决，那么贪心法一般是解决这个问题的最好办法
    // 贪心法高效性以及所求得答案比较接近最优结果，可作辅助算法或者直接解决一些要求不特别精确的问题
    // 贪心法容易过早做决定，因而没法达到最佳解

    // 实现过程：
    // 1. 创建数学模型来描述问题
    // 2. 把求解的问题分成若干个子问题
    // 3. 对每一子问题求解，得到子问题的局部最优解
    // 4. 把子问题的解局部最优解合成原来解问题的一个解

    // TODO: http://www.leetcodecn.com/pages/2b9db5/#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0
}
