TODO. 为什么使用分布式ID以及有什么要求 ?
分布式ID作为分布式系统中数据的唯一标识，实现快速定位并查询数据
1. 全局唯一(unique)
2. 按照时间粗略有序(sortable by time)
3. 尽可能短

TODO: 在分布式这个场景下，无法保证严格有序，要想高性能只能粗略有序 ? 如何实现
失败方案: Hibernate对ID生成做了具体的实现
1. UUID: 索引太长，非自增
2. 自增ID: 数据库分表之后，自增的id可能会出现重复

分布式ID生成系统: 高可用，高并发(高调用率)
1. 数据库自增ID: 使用另外一个数据库来做自增ID
2. 数据库多主模式: 使用集群和主从来保证高可用
3. 号段模式: 请求一次数据库，批量获取分布式ID，可能会导致一段号段的失效

成熟的企业级分布式ID生成器
1. DiDi TinyID: Spring + JdbcTemplate + DB数据库 > 基于自增
2. Twitter Snowflake: 雪花算法
   - Meituan leaf 提供号段和雪花两种模式
     使用Zk来解决workid的自动生成，利用zk的"有序"增加的特性
     [192.168.0.102:8889-0000001, 192.168.0.102:8889-0000000] 顺序递增，使用后面的序列数
   - Baidu uid-generator 不推荐使用 !
     作为雪花算法的一个扩展，在使用的时候能够自动生成对应的机器id
     只能连一个数据库，没有做到对应机器部署的区分(docker或实体机)