String: 算法理论
1. String -> 将字符串的问题，转成字符数组的问题
   char[] chars = str.toCharArray();
   private void reverse(char[] a, int i, int j) {
       while (i < j) {
           char t = a[i];
           a[i++] = a[j]; // 替换完值之后再移位置
           a[j--] = t;
       }
   }
2. 使用StringBuilder来拼接字符串，提高字符处理性能
3. 将字符串中的char映射到int值, 利用有限的字符数组
   在不增加空间复杂度的情况下，优化时间复杂度
   int[] count = new int[26]; // 标准英文字符
   int[] chars = new int[128];// ASCII基本字符集(最高位0)
4. 关于字符串中字符的统计
   4.1 使用额外的字符数组统计
       .charAt(index)-'0'  从char转换到int来计算
       count[c - 'a']++;  从char直接映射index的坐标，26个小写字母从0开始
   4.2 使用HashMap统计字符key值的频率
       Map<String, Integer> map = new HashMap<>();